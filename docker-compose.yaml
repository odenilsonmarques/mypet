version: '3'

services: 
  laravel-app: #PRIMEIRO SERVIÇO CRIADO
    build: .
    ports: 
      - "8080:80" #ESSA LINHA ESPELHA A PORTA (8080) LOCAL DA MINHA MAQUINA PARA A PORTA (80) DO CONTAINER ONDE ESTÁ RODANDO O NGINXdock
    volumes: # AO DECLARAR O VOLUME, MESMO QUE MATE MEU CONTAINER AINDA IREI TER MEUS DADOS LOCALMENTE
      - ./:/usr/share/nginx # NESSA LINHA, PRIMEIRO DECLARO ./(PONTO E BARRA) PARA ACESSAR A PASTA RAIZ DESSE CONTAINER NA MINHA MAQUINA(ONDE FICA OS ARQUIVOS DOCKERFILE....) DEPOIS ACESSO O CAMINHO :/usr/share/nginx (PARA COMPARTILHAR MEUS ARQUIVOS LOCAIS COM O CONTAINER QUE ESTÁ RODANDO O NGINX, DESSA FORMA MESMO QUE EU MATE MEU CONTAINER, ONDE TA RODANDO O NGINX AINDA VOU TER ACESSO AOS MEUS ARQUIVOS NO MEU CONTAINER LOCAL)  
    networks: #DEFININDO UMA REDE PARA QUE O MYSQL-APP CONVERSE COM A MESMA REDE DO CONTAINER DO MYSQL
      - app-network
      
  mysql-app: #SEGUNDO SERVIÇO  CRIADO
    image: mysql:5.7
    ports: 
      - "3306:3306" # DEFININDO QUE AS PORTAS LOCAL E NO CONTAINER SERÃO AS MESMAS
    volumes: 
      - .docker/dbdata:/var/lib/mysql # SIGNIFICA QUE TODAS AS VEZES QUE A INSTANCIA DO MYQL FOR CRIADA OS ARQUIVOS DO BD DO MYSQL (DADOS0) VAO FICAR GUARDADOS DENTRO DA PASTA dbdata
    environment: # ESSAS VARAVEIS DE AMBIENTES SÃO PERMITIDAS PELA IMAGEM DO MYSQL, ELAS SERVEM PARA CONFIGURAR ALGUNS ACESSO COMO (USUARIO, BANCO DE DADOS ..)
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: laravel
    networks: #DEFININDO UMA REDE PARA QUE O MYSQL-APP CONVERSE COM A MESMA REDE DO CONTAINER DO MYSQL
      - app-network
networks: 
  app-network: 
      driver: bridge #  ESSE DRIVE VAI CRIAR A PONTE DE COMUNICAÇÃO ENTRE AS REDES